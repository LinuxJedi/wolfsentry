# Makefile
#
# Copyright (C) 2021 wolfSSL Inc.
#
# This file is part of wolfSentry.
#
# wolfSentry is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# wolfSentry is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1335, USA

ifeq "$(V)" "1"
     QUIET_FLAG:=
else
     QUIET_FLAG:=--quiet
endif

.PHONY: valgrind
valgrind: VALGRIND=valgrind --tool=memcheck --leak-check=full --error-exitcode=10 $(VALGRIND_ARGS)
valgrind: test

.PHONY: valgrind-drd
valgrind-drd: VALGRIND=valgrind --tool=drd --error-exitcode=10 $(VALGRIND_ARGS)
valgrind-drd: test

.PHONY: valgrind-helgrind
valgrind-helgrind: VALGRIND=valgrind --tool=helgrind --error-exitcode=10 $(VALGRIND_ARGS)
valgrind-helgrind: test

.PHONY: valgrind-all
valgrind-all:
	@$(MAKE) -f $(THIS_MAKEFILE) BUILD_TOP=valgrind-builds clean >/dev/null
	@echo "valgrind memcheck"
	@echo "================="
	@$(MAKE) -f $(THIS_MAKEFILE) BUILD_TOP=valgrind-builds VALGRIND_ARGS=-q valgrind
	@echo
	@echo "valgrind drd"
	@echo "============"
	@$(MAKE) -f $(THIS_MAKEFILE) BUILD_TOP=valgrind-builds VALGRIND_ARGS=-q valgrind-drd
	@echo
	@echo "valgrind helgrind"
	@echo "================="
	@$(MAKE) -f $(THIS_MAKEFILE) BUILD_TOP=valgrind-builds VALGRIND_ARGS=-q valgrind-helgrind
	@echo
	@echo "valgrind found no defects."
	@$(MAKE) -f $(THIS_MAKEFILE) BUILD_TOP=valgrind-builds clean >/dev/null

.PHONY: sanitize
sanitize: CFLAGS+=-fsanitize=address -fsanitize=pointer-subtract -fsanitize=leak -fsanitize=undefined -fsanitize=float-cast-overflow -fsanitize=float-divide-by-zero
sanitize: LDFLAGS+=-fsanitize=address -fsanitize=pointer-subtract -fsanitize=leak -fsanitize=undefined -fsanitize=float-cast-overflow -fsanitize=float-divide-by-zero

ifeq "$(CC_IS_GCC)" "1"
sanitize: CFLAGS+=-fsanitize=bounds-strict
sanitize: LDFLAGS+=-fsanitize=bounds-strict
endif

sanitize: TEST_ENV+=ASAN_OPTIONS=detect_invalid_pointer_pairs=2
sanitize: test

.PHONY: sanitize-thread
sanitize-thread: CFLAGS+=-fsanitize=thread
sanitize-thread: LDFLAGS+=-fsanitize=thread
sanitize-thread: test

.PHONY: sanitize-all
sanitize-all:
ifeq "$(CC_IS_GCC)" "1"
	@echo "sanitize address, leak, undefined, float-cast-overflow, float-divide-by-zero, and bounds-strict"
	@echo "==============================================================================================="
else
	@echo "sanitize address, leak, undefined, float-cast-overflow, and float-divide-by-zero"
	@echo "================================================================================"
endif
	@$(MAKE) -f $(THIS_MAKEFILE) BUILD_TOP=sanitizer-builds clean >/dev/null
	@$(MAKE) -f $(THIS_MAKEFILE) BUILD_TOP=sanitizer-builds EXTRA_CFLAGS+="-fno-sanitize-recover=all" sanitize
	@echo
	@echo "sanitize thread"
	@echo "==============="
	@$(MAKE) -f $(THIS_MAKEFILE) BUILD_TOP=sanitizer-builds clean >/dev/null
	@$(MAKE) -f $(THIS_MAKEFILE) BUILD_TOP=sanitizer-builds EXTRA_CFLAGS+="-fno-sanitize-recover=all" sanitize-thread
	@echo
	@echo "sanitizers found no defects."
	@$(MAKE) -f $(THIS_MAKEFILE) BUILD_TOP=sanitizer-builds clean >/dev/null


.PHONY: valgrind-all-gcc
valgrind-all-gcc:
	@$(MAKE) $(QUIET_FLAG) -f $(THIS_MAKEFILE) VERY_QUIET=1 BUILD_TOP=valgrind-gcc-builds clean >/dev/null
	@echo "valgrind memcheck (gcc)"
	@$(MAKE) $(QUIET_FLAG) -f $(THIS_MAKEFILE) VERY_QUIET=1 BUILD_TOP=valgrind-gcc-builds CC=gcc VALGRIND_ARGS=-q valgrind
	@echo "valgrind drd (gcc)"
	@$(MAKE) $(QUIET_FLAG) -f $(THIS_MAKEFILE) VERY_QUIET=1 BUILD_TOP=valgrind-gcc-builds CC=gcc VALGRIND_ARGS=-q valgrind-drd
	@echo "valgrind helgrind (gcc)"
	@$(MAKE) $(QUIET_FLAG) -f $(THIS_MAKEFILE) VERY_QUIET=1 BUILD_TOP=valgrind-gcc-builds CC=gcc VALGRIND_ARGS=-q valgrind-helgrind
	@echo "valgrind (gcc) found no defects."
	@$(MAKE) $(QUIET_FLAG) -f $(THIS_MAKEFILE) VERY_QUIET=1 BUILD_TOP=valgrind-gcc-builds clean >/dev/null

.PHONY: valgrind-all-clang
valgrind-all-clang:
	@$(MAKE) $(QUIET_FLAG) -f $(THIS_MAKEFILE) VERY_QUIET=1 BUILD_TOP=valgrind-clang-builds clean >/dev/null
	@echo "valgrind memcheck (clang)"
	@$(MAKE) $(QUIET_FLAG) -f $(THIS_MAKEFILE) VERY_QUIET=1 BUILD_TOP=valgrind-clang-builds CC=clang VALGRIND_ARGS=-q valgrind
	@echo "valgrind drd (clang)"
	@$(MAKE) $(QUIET_FLAG) -f $(THIS_MAKEFILE) VERY_QUIET=1 BUILD_TOP=valgrind-clang-builds CC=clang VALGRIND_ARGS=-q valgrind-drd
	@echo "valgrind helgrind (clang)"
	@$(MAKE) $(QUIET_FLAG) -f $(THIS_MAKEFILE) VERY_QUIET=1 BUILD_TOP=valgrind-clang-builds CC=clang VALGRIND_ARGS=-q valgrind-helgrind
	@echo "valgrind (clang) found no defects."
	@$(MAKE) $(QUIET_FLAG) -f $(THIS_MAKEFILE) VERY_QUIET=1 BUILD_TOP=valgrind-clang-builds clean >/dev/null

.PHONY: sanitize-all-gcc
sanitize-all-gcc:
	@echo "sanitize (gcc) address, leak, undefined, float-cast-overflow, float-divide-by-zero, and bounds-strict"
	@$(MAKE) $(QUIET_FLAG) -f $(THIS_MAKEFILE) VERY_QUIET=1 BUILD_TOP=sanitizer-builds-gcc clean >/dev/null
	@$(MAKE) $(QUIET_FLAG) -f $(THIS_MAKEFILE) VERY_QUIET=1 BUILD_TOP=sanitizer-builds-gcc CC=gcc EXTRA_CFLAGS+="-fno-sanitize-recover=all" sanitize
	@echo "sanitize thread (gcc)"
	@$(MAKE) $(QUIET_FLAG) -f $(THIS_MAKEFILE) VERY_QUIET=1 BUILD_TOP=sanitizer-builds-gcc clean >/dev/null
	@$(MAKE) $(QUIET_FLAG) -f $(THIS_MAKEFILE) VERY_QUIET=1 BUILD_TOP=sanitizer-builds-gcc CC=gcc EXTRA_CFLAGS+="-fno-sanitize-recover=all" sanitize-thread
	@echo "sanitizers (gcc) found no defects."
	@$(MAKE) $(QUIET_FLAG) -f $(THIS_MAKEFILE) VERY_QUIET=1 BUILD_TOP=sanitizer-builds-gcc clean >/dev/null

.PHONY: sanitize-all-clang
sanitize-all-clang:
	@echo "sanitize (clang) address, leak, undefined, float-cast-overflow, and float-divide-by-zero"
	@$(MAKE) $(QUIET_FLAG) -f $(THIS_MAKEFILE) VERY_QUIET=1 BUILD_TOP=sanitizer-builds-clang clean >/dev/null
	@$(MAKE) $(QUIET_FLAG) -f $(THIS_MAKEFILE) VERY_QUIET=1 BUILD_TOP=sanitizer-builds-clang CC=clang EXTRA_CFLAGS+="-fno-sanitize-recover=all" sanitize
	@echo "sanitize (clang) thread"
	@$(MAKE) $(QUIET_FLAG) -f $(THIS_MAKEFILE) VERY_QUIET=1 BUILD_TOP=sanitizer-builds-clang clean >/dev/null
	@$(MAKE) $(QUIET_FLAG) -f $(THIS_MAKEFILE) VERY_QUIET=1 BUILD_TOP=sanitizer-builds-clang CC=clang EXTRA_CFLAGS+="-fno-sanitize-recover=all" sanitize-thread
	@echo "sanitizers (clang) found no defects."
	@$(MAKE) $(QUIET_FLAG) -f $(THIS_MAKEFILE) VERY_QUIET=1 BUILD_TOP=sanitizer-builds-clang clean >/dev/null

.PHONY: analyze-all
analyze-all: valgrind-all-gcc valgrind-all-clang sanitize-all-gcc sanitize-all-clang
	@echo "analyzers found no defects."

.PHONY: c99-test
c99-test:
	@$(MAKE) $(QUIET_FLAG) -f $(THIS_MAKEFILE) VERY_QUIET=1 BUILD_TOP=gcc-c99-builds clean >/dev/null
	@$(MAKE) $(QUIET_FLAG) -f $(THIS_MAKEFILE) VERY_QUIET=1 BUILD_TOP=gcc-c99-builds EXTRA_CFLAGS+='-std=c99 -pedantic'
	@$(MAKE) $(QUIET_FLAG) -f $(THIS_MAKEFILE) VERY_QUIET=1 BUILD_TOP=gcc-c99-builds clean >/dev/null
	@$(MAKE) $(QUIET_FLAG) -f $(THIS_MAKEFILE) VERY_QUIET=1 BUILD_TOP=gcc-c99-builds EXTRA_CFLAGS+='-std=c99 -pedantic' SINGLETHREADED=1
	@$(MAKE) $(QUIET_FLAG) -f $(THIS_MAKEFILE) VERY_QUIET=1 BUILD_TOP=gcc-c99-builds clean >/dev/null
	@$(MAKE) $(QUIET_FLAG) -f $(THIS_MAKEFILE) VERY_QUIET=1 BUILD_TOP=gcc-c99-builds CC=clang EXTRA_CFLAGS+='-std=c99 -pedantic'
	@$(MAKE) $(QUIET_FLAG) -f $(THIS_MAKEFILE) VERY_QUIET=1 BUILD_TOP=gcc-c99-builds clean >/dev/null
	@$(MAKE) $(QUIET_FLAG) -f $(THIS_MAKEFILE) VERY_QUIET=1 BUILD_TOP=gcc-c99-builds CC=clang EXTRA_CFLAGS+='-std=c99 -pedantic' SINGLETHREADED=1
	@$(MAKE) $(QUIET_FLAG) -f $(THIS_MAKEFILE) VERY_QUIET=1 BUILD_TOP=gcc-c99-builds clean >/dev/null
	@echo "std=c99 library build tests passed."

.PHONY: m32-test
m32-test:
	@$(MAKE) $(QUIET_FLAG) -f $(THIS_MAKEFILE) VERY_QUIET=1 BUILD_TOP=m32-builds clean >/dev/null
	@$(MAKE) $(QUIET_FLAG) -f $(THIS_MAKEFILE) VERY_QUIET=1 BUILD_TOP=m32-builds EXTRA_CFLAGS+=-m32 EXTRA_LDFLAGS+=-m32 test
	@$(MAKE) $(QUIET_FLAG) -f $(THIS_MAKEFILE) VERY_QUIET=1 BUILD_TOP=m32-builds clean >/dev/null
	@echo "-m32 test passed."

.PHONY: check
check: analyze-all c99-test m32-test
	@echo "all checks passed."
